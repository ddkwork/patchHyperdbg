Subject: [PATCH] mcp
---
Index: examples/user/hyperdbg_app/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/user/hyperdbg_app/CMakeLists.txt b/examples/user/hyperdbg_app/CMakeLists.txt
--- a/examples/user/hyperdbg_app/CMakeLists.txt	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/examples/user/hyperdbg_app/CMakeLists.txt	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -1,6 +1,5 @@
 # Code generated by Visual Studio kit, DO NOT EDIT.
 set(SourceFiles
-    "../../../platform/user/header/Environment.h"
     "header/pch.h"
     "code/hyperdbg-app.cpp"
 )
Index: hyperdbg/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyperdbg/CMakeLists.txt b/hyperdbg/CMakeLists.txt
--- a/hyperdbg/CMakeLists.txt	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/hyperdbg/CMakeLists.txt	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -15,7 +15,7 @@
 	)
 
 	file(GLOB ZydisSourceFiles "dependencies/zydis/src/*.c")
-	file(GLOB ZycoreSourceFiles "dependencies/zydis/dependencies/zycore/*.c")
+	file(GLOB ZycoreSourceFiles "dependencies/zydis/dependencies/zycore/src/*.c")
 
 	set(SourceFiles
 	       ${ZydisSourceFiles}
@@ -23,9 +23,10 @@
 	       #        examples/ZydisWinKernel.c
 	)
 
-	add_definitions(
-	       -DZYAN_NO_LIBC
-	       -DZYDIS_NO_LIBC
+	add_library(zydis STATIC ${SourceFiles})
+	target_compile_definitions(zydis PUBLIC
+	       -UZYAN_NO_LIBC
+	       -UZYDIS_NO_LIBC
 	       -DZYCORE_STATIC_BUILD
 	       -DZYDIS_STATIC_BUILD
 	)
@@ -34,49 +35,53 @@
 	       KMDF 1.15
 	       ${SourceFiles}
 	)
+	target_compile_definitions(zydisKernel PUBLIC
+     	       -DZYAN_NO_LIBC
+     	       -DZYDIS_NO_LIBC
+     	       -DZYCORE_STATIC_BUILD
+     	       -DZYDIS_STATIC_BUILD
+     	)
 link_directories(libraries/kdserial/x64)
 add_subdirectory(kdserial)
-target_link_libraries(kdserial kdserialtransport kdhv kdtelemetry)
+target_link_libraries(kdserial kdserialtransport kdhv kdtelemetry WDK::NTOSKRNL WDK::HAL)
 
 
 add_subdirectory(hyperlog)
+target_link_libraries(hyperlog WDK::NTOSKRNL WDK::HAL)
+
+
+add_subdirectory(hyperevade)
+target_link_libraries(hyperevade WDK::NTOSKRNL WDK::HAL)
+
 link_directories(libraries/zydis/kernel)
 add_subdirectory(hyperhv)
-target_link_libraries(hyperhv Zycore Zydis)
+target_link_libraries(hyperhv zydisKernel hyperevade   WDK::NTOSKRNL WDK::HAL)
 
 
 add_subdirectory(hyperkd)
-target_link_libraries(hyperkd hyperlog hyperhv kdserial)
+target_link_libraries(hyperkd hyperlog hyperhv kdserial WDK::NTOSKRNL WDK::HAL)
 
 
 add_subdirectory(dependencies/pdbex/Source)
 
 add_subdirectory(symbol-parser)
-target_link_libraries(symbol-parser pdbex)
+target_link_libraries(symbol_parser pdbex)
 
 
 add_subdirectory(script-engine)
-target_link_libraries(script-engine symbol-parser)
+target_link_libraries(script_engine symbol_parser)
 
-link_directories(libraries/zydis/user libraries/keystone/release-lib)
+add_subdirectory(keystone)
 add_subdirectory(libhyperdbg)
-target_link_libraries(libhyperdbg Zycore Zydis script-engine keystone)
+target_link_libraries(libhyperdbg zydis script_engine keystone  )
 
 
 add_subdirectory(hyperdbg-test)
+target_link_libraries(hyperdbg_test libhyperdbg)
+
 
 add_subdirectory(hyperdbg-cli)
-target_link_libraries(hyperdbg-cli libhyperdbg)
+target_link_libraries(hyperdbg_cli libhyperdbg)
 
 
 
-#set(save_src_dir ${CMAKE_CURRENT_SOURCE_DIR}/examples)
-#execute_process( COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/../examples ${save_src_dir})
-#
-#add_subdirectory(examples/kernel/hyperdbg_driver)
-#target_link_libraries(hyperdbg_driver hyperlog hyperhv)
-#
-#
-#add_subdirectory(examples/user/hyperdbg_app)
-#target_link_libraries(hyperdbg_app libhyperdbg)
-
Index: hyperdbg/FindWdk.cmake
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyperdbg/FindWdk.cmake b/hyperdbg/FindWdk.cmake
--- a/hyperdbg/FindWdk.cmake	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/hyperdbg/FindWdk.cmake	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -13,7 +13,7 @@
 # - `WDK_ROOT` -- where WDK is installed
 # - `WDK_VERSION` -- the version of the selected WDK
 # - `WDK_WINVER` -- the WINVER used for kernel drivers and libraries
-#        (default value is `0x0601` and can be changed per target or globally)
+#        (default value is `0x0602` and can be changed per target or globally)
 # - `WDK_NTDDI_VERSION` -- the NTDDI_VERSION used for kernel drivers and libraries,
 #                          if not set, the value will be automatically calculated by WINVER
 #        (default value is left blank and can be changed per target or globally)
@@ -56,7 +56,7 @@
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(WDK REQUIRED_VARS WDK_LATEST_NTDDK_FILE)
 
-if (NOT WDK_LATEST_NTDDK_FILE)
+if(NOT WDK_LATEST_NTDDK_FILE)
     return()
 endif()
 
@@ -82,8 +82,35 @@
 message(STATUS "WDK_ROOT: " ${WDK_ROOT})
 message(STATUS "WDK_VERSION: " ${WDK_VERSION})
 
-set(WDK_WINVER "0x0a01" CACHE STRING "Default WINVER for WDK targets")
+#C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\sdkddkver.h
+#define NTDDI_WIN7                          0x06010000
+#define NTDDI_WIN8                          0x06020000
+#define NTDDI_WINBLUE                       0x06030000
+#define NTDDI_WINTHRESHOLD                  0x0A000000
+#define NTDDI_WIN10                         0x0A000000
+#define NTDDI_WIN10_TH2                     0x0A000001
+#define NTDDI_WIN10_RS1                     0x0A000002
+#define NTDDI_WIN10_RS2                     0x0A000003
+#define NTDDI_WIN10_RS3                     0x0A000004
+#define NTDDI_WIN10_RS4                     0x0A000005
+#define NTDDI_WIN10_RS5                     0x0A000006
+#define NTDDI_WIN10_19H1                    0x0A000007
+#define NTDDI_WIN10_VB                      0x0A000008
+#define NTDDI_WIN10_MN                      0x0A000009
+#define NTDDI_WIN10_FE                      0x0A00000A
+#define NTDDI_WIN10_CO                      0x0A00000B
+#define NTDDI_WIN10_NI                      0x0A00000C
+#define NTDDI_WIN10_CU                      0x0A00000D
+#define NTDDI_WIN11_ZN                      0x0A00000E
+#define NTDDI_WIN11_GA                      0x0A00000F
+#define NTDDI_WIN11_GE                      0x0A000010
+
+#define WDK_NTDDI_VERSION                   NTDDI_WIN11_GE
+
+set(WDK_WINVER "0x0A000010" CACHE STRING "Default WINVER for WDK targets")
 set(WDK_NTDDI_VERSION "" CACHE STRING "Specified NTDDI_VERSION for WDK targets if needed")
+#define NTDDI_WIN8                          0x06020000
+add_definitions(-DNTDDI_VERSION=NTDDI_WIN11_GE)
 
 set(WDK_ADDITIONAL_FLAGS_FILE "${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/wdkflags.h")
 file(WRITE ${WDK_ADDITIONAL_FLAGS_FILE} "#pragma runtime_checks(\"suc\", off)")
@@ -96,6 +123,7 @@
     "/kernel"  # create kernel mode binary
     "/FIwarning.h" # disable warnings in WDK headers
     "/FI${WDK_ADDITIONAL_FLAGS_FILE}" # include file to disable RTC
+	"/Oi" # enable intrinsic functions so that you can use functions like _disable or _enable
     )
 
 set(WDK_COMPILE_DEFINITIONS "WINNT=1")
@@ -104,8 +132,11 @@
 if(CMAKE_SIZEOF_VOID_P EQUAL 4)
     list(APPEND WDK_COMPILE_DEFINITIONS "_X86_=1;i386=1;STD_CALL")
     set(WDK_PLATFORM "x86")
+elseif(CMAKE_SIZEOF_VOID_P EQUAL 8 AND CMAKE_CXX_COMPILER_ARCHITECTURE_ID STREQUAL "ARM64")
+    list(APPEND WDK_COMPILE_DEFINITIONS "_ARM64_;ARM64;_USE_DECLSPECS_FOR_SAL=1;STD_CALL")
+    set(WDK_PLATFORM "arm64")
 elseif(CMAKE_SIZEOF_VOID_P EQUAL 8)
-    list(APPEND WDK_COMPILE_DEFINITIONS "_WIN64;_AMD64_;AMD64")
+    list(APPEND WDK_COMPILE_DEFINITIONS "_AMD64_;AMD64")
     set(WDK_PLATFORM "x64")
 else()
     message(FATAL_ERROR "Unsupported architecture")
@@ -130,7 +161,7 @@
     get_filename_component(LIBRARY_NAME ${LIBRARY} NAME_WE)
     string(TOUPPER ${LIBRARY_NAME} LIBRARY_NAME)
     add_library(WDK::${LIBRARY_NAME} INTERFACE IMPORTED)
-    set_property(TARGET WDK::${LIBRARY_NAME} PROPERTY INTERFACE_LINK_LIBRARIES  ${LIBRARY})
+    set_property(TARGET WDK::${LIBRARY_NAME} PROPERTY INTERFACE_LINK_LIBRARIES ${LIBRARY})
 endforeach(LIBRARY)
 unset(WDK_LIBRARIES)
 
@@ -155,7 +186,35 @@
         "${WDK_ROOT}/Include/${WDK_INC_VERSION}/km/crt"
         )
 
-    target_link_libraries(${_target} WDK::NTOSKRNL WDK::HAL WDK::BUFFEROVERFLOWK WDK::WMILIB)
+    #target_link_libraries(${_target} WDK::NTOSKRNL WDK::HAL WDK::WMILIB)
+    #$(KernelBufferOverflowLib);$(DDK_LIB_PATH)ntoskrnl.lib;
+    #$(DDK_LIB_PATH)hal.lib;
+    #$(DDK_LIB_PATH)wmilib.lib;
+    #$(KMDF_VER_PATH)\WdfLdr.lib;
+    #$(KMDF_VER_PATH)\WdfDriverEntry.lib;
+    #$(DDK_LIB_PATH)\wdmsec.lib;
+    #$(DDK_LIB_PATH)\ndis.lib;
+    #$(DDK_LIB_PATH)\fwpkclnt.lib;
+    #$(SDK_LIB_PATH)\uuid.lib
+    target_link_libraries(${_target}
+            WDK::NTOSKRNL
+            WDK::HAL
+            WDK::BUFFEROVERFLOWK
+            WDK::WMILIB
+            WDK::NDIS
+            WDK::FWPKCLNT
+            WDK::WDMSEC
+    )
+
+    if(WDK::BUFFEROVERFLOWK)
+        target_link_libraries(${_target} WDK::BUFFEROVERFLOWK) # to support Windows 7 and Vista
+    else()
+        target_link_libraries(${_target} WDK::BUFFEROVERFLOWFASTFAILK)
+    endif()
+
+    if(CMAKE_CXX_COMPILER_ARCHITECTURE_ID STREQUAL "ARM64")
+        target_link_libraries(${_target} "arm64rt.lib")
+    endif()
 
     if(CMAKE_SIZEOF_VOID_P EQUAL 4)
         target_link_libraries(${_target} WDK::MEMCMP)
@@ -170,13 +229,13 @@
 
         if(CMAKE_SIZEOF_VOID_P EQUAL 4)
             set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS "/ENTRY:FxDriverEntry@8")
-        elseif(CMAKE_SIZEOF_VOID_P  EQUAL 8)
+        elseif(CMAKE_SIZEOF_VOID_P EQUAL 8)
             set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS "/ENTRY:FxDriverEntry")
         endif()
     else()
         if(CMAKE_SIZEOF_VOID_P EQUAL 4)
             set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS "/ENTRY:GsDriverEntry@8")
-        elseif(CMAKE_SIZEOF_VOID_P  EQUAL 8)
+        elseif(CMAKE_SIZEOF_VOID_P EQUAL 8)
             set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS "/ENTRY:GsDriverEntry")
         endif()
     endif()
@@ -201,8 +260,6 @@
         "${WDK_ROOT}/Include/${WDK_INC_VERSION}/km/crt"
         )
 
-    target_link_libraries(${_target} WDK::NTOSKRNL WDK::HAL WDK::WMILIB)
-
     if(DEFINED WDK_KMDF)
         target_include_directories(${_target} SYSTEM PRIVATE "${WDK_ROOT}/Include/wdf/kmdf/${WDK_KMDF}")
     endif()
Index: hyperdbg/hyperdbg-cli/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyperdbg/hyperdbg-cli/CMakeLists.txt b/hyperdbg/hyperdbg-cli/CMakeLists.txt
--- a/hyperdbg/hyperdbg-cli/CMakeLists.txt	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/hyperdbg/hyperdbg-cli/CMakeLists.txt	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -7,4 +7,4 @@
     "../include"
     "../dependencies"
 )
-add_executable(hyperdbg-cli ${SourceFiles})
+add_executable(hyperdbg_cli ${SourceFiles})
Index: hyperdbg/hyperdbg-test/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyperdbg/hyperdbg-test/CMakeLists.txt b/hyperdbg/hyperdbg-test/CMakeLists.txt
--- a/hyperdbg/hyperdbg-test/CMakeLists.txt	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/hyperdbg/hyperdbg-test/CMakeLists.txt	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -1,12 +1,17 @@
 # Code generated by Visual Studio kit, DO NOT EDIT.
 set(SourceFiles
-    "code/tests/hyperdbg-test.cpp"
-    "code/tests/namedpipe.cpp"
-    "code/tests/tools.cpp"
+    "code/hardware/hwdbg-tests.cpp"
+    "code/main.cpp"
+    "code/namedpipe.cpp"
+    "code/tests/test-parser.cpp"
+    "code/tests/test-semantic-scripts.cpp"
+    "code/tools.cpp"
     "pch.cpp"
     "../include/platform/user/header/Environment.h"
+    "header/hwdbg-tests.h"
     "header/namedpipe.h"
     "header/routines.h"
+    "header/testcases.h"
     "pch.h"
     "code/assembly/asm-test.asm"
 )
@@ -15,4 +20,4 @@
     "../dependencies"
     "."
 )
-add_executable(hyperdbg-test ${SourceFiles})
+add_executable(hyperdbg_test ${SourceFiles})
Index: hyperdbg/hyperevade/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyperdbg/hyperevade/CMakeLists.txt b/hyperdbg/hyperevade/CMakeLists.txt
--- a/hyperdbg/hyperevade/CMakeLists.txt	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/hyperdbg/hyperevade/CMakeLists.txt	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -1,20 +1,30 @@
 # Code generated by Visual Studio kit, DO NOT EDIT.
 set(SourceFiles
+    "../hyperhv/code/components/registers/DebugRegisters.c"
+    "../include/components/interface/HyperLogCallback.c"
+    "../include/components/optimizations/code/AvlTree.c"
+    "../include/components/optimizations/code/BinarySearch.c"
+    "../include/components/optimizations/code/InsertionSort.c"
+    "../include/components/optimizations/code/OptimizationsExamples.c"
     "../include/components/spinlock/code/Spinlock.c"
     "../include/platform/kernel/code/Mem.c"
-    "code/Logging.c"
+    "code/SyscallFootprints.c"
+    "code/Transparency.c"
     "code/UnloadDll.c"
-    "../include/components/spinlock/header/Spinlock.h"
+    "code/VmxFootprints.c"
+    "../include/components/interface/HyperLogCallback.h"
     "../include/platform/kernel/header/Environment.h"
     "../include/platform/kernel/header/Mem.h"
-    "header/Logging.h"
+    "header/SyscallFootprints.h"
+    "header/Transparency.h"
     "header/pch.h"
-    "header/UnloadDll.h"
+    "header/VmxFootprints.h"
     "hyperevade.def"
 )
 include_directories(
     "../include"
     "header"
+    "../dependencies"
 )
 wdk_add_library(hyperevade SHARED
     KMDF 1.15
Index: hyperdbg/hyperhv/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyperdbg/hyperhv/CMakeLists.txt b/hyperdbg/hyperhv/CMakeLists.txt
--- a/hyperdbg/hyperhv/CMakeLists.txt	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/hyperdbg/hyperhv/CMakeLists.txt	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -1,5 +1,6 @@
 # Code generated by Visual Studio kit, DO NOT EDIT.
 set(SourceFiles
+    "../include/components/interface/HyperLogCallback.c"
     "../include/components/optimizations/code/AvlTree.c"
     "../include/components/optimizations/code/BinarySearch.c"
     "../include/components/optimizations/code/InsertionSort.c"
@@ -13,6 +14,7 @@
     "code/common/UnloadDll.c"
     "code/components/registers/DebugRegisters.c"
     "code/devices/Apic.c"
+    "code/devices/Pci.c"
     "code/disassembler/Disassembler.c"
     "code/disassembler/ZydisKernel.c"
     "code/features/CompatibilityChecks.c"
@@ -22,12 +24,13 @@
     "code/hooks/ept-hook/ModeBasedExecHook.c"
     "code/hooks/ept-hook/ExecTrap.c"
     "code/hooks/syscall-hook/EferHook.c"
-    "code/hooks/syscall-hook/SsdtHook.c"
+    "code/hooks/syscall-hook/SyscallCallback.c"
     "code/interface/Callback.c"
     "code/interface/Configuration.c"
     "code/interface/DirectVmcall.c"
     "code/interface/Dispatch.c"
     "code/interface/Export.c"
+    "code/interface/HyperEvade.c"
     "code/memory/AddressCheck.c"
     "code/memory/Conversion.c"
     "code/memory/Layout.c"
@@ -36,7 +39,8 @@
     "code/memory/PoolManager.c"
     "code/memory/Segmentation.c"
     "code/memory/SwitchLayout.c"
-    "code/transparency/Transparency.c"
+    "code/mmio/MmioShadowing.c"
+    "code/processor/Idt.c"
     "code/vmm/ept/Ept.c"
     "code/vmm/ept/Invept.c"
     "code/vmm/ept/Vpid.c"
@@ -95,6 +99,7 @@
     "../dependencies/zydis/include/Zydis/Status.h"
     "../dependencies/zydis/include/Zydis/Utils.h"
     "../dependencies/zydis/include/Zydis/Zydis.h"
+    "../include/components/interface/HyperLogCallback.h"
     "../include/components/optimizations/header/AvlTree.h"
     "../include/components/optimizations/header/BinarySearch.h"
     "../include/components/optimizations/header/InsertionSort.h"
@@ -114,6 +119,7 @@
     "header/common/Trace.h"
     "header/common/UnloadDll.h"
     "header/devices/Apic.h"
+    "header/devices/Pci.h"
     "header/disassembler/Disassembler.h"
     "header/features/CompatibilityChecks.h"
     "header/features/DirtyLogging.h"
@@ -122,6 +128,7 @@
     "header/hooks/Hooks.h"
     "header/hooks/ModeBasedExecHook.h"
     "header/hooks/ExecTrap.h"
+    "header/hooks/SyscallCallback.h"
     "header/interface/Callback.h"
     "header/interface/DirectVmcall.h"
     "header/interface/Dispatch.h"
@@ -132,14 +139,14 @@
     "header/memory/PoolManager.h"
     "header/memory/Segmentation.h"
     "header/memory/SwitchLayout.h"
-    "header/transparency/Transparency.h"
+    "header/mmio/MmioShadowing.h"
+    "header/processor/Idt.h"
     "header/vmm/ept/Ept.h"
     "header/vmm/ept/Invept.h"
     "header/vmm/ept/Vpid.h"
     "header/vmm/vmx/Counters.h"
     "header/vmm/vmx/Events.h"
     "header/vmm/vmx/Hv.h"
-    "header/vmm/vmx/HypervTlfs.h"
     "header/vmm/vmx/IdtEmulation.h"
     "header/vmm/vmx/IoHandler.h"
     "header/vmm/vmx/MsrHandlers.h"
Index: hyperdbg/libhyperdbg/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyperdbg/libhyperdbg/CMakeLists.txt b/hyperdbg/libhyperdbg/CMakeLists.txt
--- a/hyperdbg/libhyperdbg/CMakeLists.txt	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/hyperdbg/libhyperdbg/CMakeLists.txt	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -12,6 +12,7 @@
     "header/globals.h"
     "header/help.h"
     "header/hwdbg-interpreter.h"
+    "header/hwdbg-scripts.h"
     "header/inipp.h"
     "header/install.h"
     "header/kd.h"
@@ -22,11 +23,13 @@
     "header/pe-parser.h"
     "header/rev-ctrl.h"
     "header/script-engine.h"
+    "header/steppings.h"
     "header/symbol.h"
     "header/tests.h"
     "header/transparency.h"
     "header/ud.h"
     "pch.h"
+    "pci-id.h"
     "../script-eval/code/Functions.c"
     "../script-eval/code/Keywords.c"
     "../script-eval/code/PseudoRegisters.c"
@@ -34,17 +37,24 @@
     "../script-eval/code/ScriptEngineEval.c"
     "code/common/spinlock.cpp"
     "code/debugger/commands/debugging-commands/a.cpp"
+    "code/debugger/commands/debugging-commands/continue.cpp"
     "code/debugger/commands/debugging-commands/core.cpp"
     "code/debugger/commands/debugging-commands/dt-struct.cpp"
+    "code/debugger/commands/debugging-commands/gg.cpp"
     "code/debugger/commands/debugging-commands/gu.cpp"
     "code/debugger/commands/debugging-commands/k.cpp"
     "code/debugger/commands/debugging-commands/preactivate.cpp"
     "code/debugger/commands/debugging-commands/prealloc.cpp"
+    "code/debugger/commands/extension-commands/apic.cpp"
     "code/debugger/commands/extension-commands/crwrite.cpp"
+    "code/debugger/commands/extension-commands/idt.cpp"
+    "code/debugger/commands/extension-commands/ioapic.cpp"
+    "code/debugger/commands/extension-commands/pcitree.cpp"
     "code/debugger/commands/extension-commands/rev.cpp"
     "code/debugger/commands/extension-commands/trace.cpp"
     "code/debugger/commands/extension-commands/track.cpp"
     "code/debugger/commands/extension-commands/mode.cpp"
+    "code/debugger/commands/hwdbg-commands/hw.cpp"
     "code/debugger/commands/hwdbg-commands/hw_clk.cpp"
     "code/debugger/commands/meta-commands/dump.cpp"
     "code/debugger/commands/meta-commands/kill.cpp"
@@ -57,6 +67,7 @@
     "code/debugger/core/break-control.cpp"
     "code/debugger/core/debugger.cpp"
     "code/debugger/core/interpreter.cpp"
+    "code/debugger/core/steppings.cpp"
     "code/debugger/kernel-level/kd.cpp"
     "code/debugger/kernel-level/kernel-listening.cpp"
     "code/debugger/misc/assembler.cpp"
@@ -71,6 +82,7 @@
     "code/debugger/user-level/user-listening.cpp"
     "code/export/export.cpp"
     "code/hwdbg/hwdbg-interpreter.cpp"
+    "code/hwdbg/hwdbg-scripts.cpp"
     "code/objects/objects.cpp"
     "code/rev/rev-ctrl.cpp"
     "pch.cpp"
@@ -154,10 +166,11 @@
     "code/debugger/tests/tests.cpp"
     "code/debugger/transparency/gaussian-rng.cpp"
     "code/debugger/transparency/transparency.cpp"
+    "pci-id.cpp"
+    "pcicam.cpp"
     "code/assembly/asm-vmx-checks.asm"
 )
 include_directories(
-    "../dependencies/phnt"
     "../dependencies"
     "../dependencies/zydis/dependencies/zycore/include"
     "../include"
@@ -167,3 +180,16 @@
     "../dependencies/keystone/include"
 )
 add_library(libhyperdbg SHARED ${SourceFiles})
+
+set_source_files_properties(../script-eval/code/Functions.c PROPERTIES LANGUAGE CXX)
+set_source_files_properties(../script-eval/code/Keywords.c PROPERTIES LANGUAGE CXX)
+set_source_files_properties(../script-eval/code/PseudoRegisters.c PROPERTIES LANGUAGE CXX)
+set_source_files_properties(../script-eval/code/Regs.c PROPERTIES LANGUAGE CXX)
+set_source_files_properties(../script-eval/code/ScriptEngineEval.c PROPERTIES LANGUAGE CXX)
+
+target_compile_definitions(libhyperdbg PRIVATE
+        -DWINVER=0x0502
+        -D_WIN32_WINNT=0x0502
+        -DNTDDI_VERSION=0x05020000
+)
+
Index: hyperdbg/libhyperdbg/code/debugger/misc/disassembler.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyperdbg/libhyperdbg/code/debugger/misc/disassembler.cpp b/hyperdbg/libhyperdbg/code/debugger/misc/disassembler.cpp
--- a/hyperdbg/libhyperdbg/code/debugger/misc/disassembler.cpp	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/hyperdbg/libhyperdbg/code/debugger/misc/disassembler.cpp	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -33,8 +33,8 @@
 #include "Zycore/LibC.h"
 #include "Zydis/Zydis.h"
 
-#pragma comment(lib, "Zydis.lib")
-#pragma comment(lib, "Zycore.lib")
+//#pragma comment(lib, "Zydis.lib")
+//#pragma comment(lib, "Zycore.lib")
 
 //
 // Global Variables
Index: hyperdbg/script-engine/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyperdbg/script-engine/CMakeLists.txt b/hyperdbg/script-engine/CMakeLists.txt
--- a/hyperdbg/script-engine/CMakeLists.txt	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/hyperdbg/script-engine/CMakeLists.txt	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -3,18 +3,20 @@
     "../include/platform/user/header/Environment.h"
     "header/common.h"
     "header/globals.h"
+    "header/hardware.h"
     "header/parse-table.h"
+    "header/pch.h"
     "header/scanner.h"
     "header/script-engine.h"
     "header/type.h"
-    "pch.h"
     "code/common.c"
     "code/globals.c"
+    "code/hardware.c"
     "code/parse-table.c"
+    "code/pch.c"
     "code/scanner.c"
     "code/script-engine.c"
     "code/type.c"
-    "pch.c"
 )
 include_directories(
     "header"
@@ -22,4 +24,4 @@
     "."
     "../script-eval"
 )
-add_library(script-engine SHARED ${SourceFiles})
+add_library(script_engine SHARED ${SourceFiles})
Index: hyperdbg/symbol-parser/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyperdbg/symbol-parser/CMakeLists.txt b/hyperdbg/symbol-parser/CMakeLists.txt
--- a/hyperdbg/symbol-parser/CMakeLists.txt	(revision 0ff9d5130138286cfe73454f71710591dd64d85a)
+++ b/hyperdbg/symbol-parser/CMakeLists.txt	(revision ce615a5a993c4dd3e831908c38e21b14c9a3090e)
@@ -14,4 +14,4 @@
     "../dependencies"
     "."
 )
-add_library(symbol-parser SHARED ${SourceFiles})
+add_library(symbol_parser SHARED ${SourceFiles})

name: patch HyperDbg mcp

on:
  push:
    branches:
      - master
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每天自动更新

jobs:
  update-patch:
    runs-on: windows-latest
    steps:
      # 1. 环境变量设置
      - name: Set up environment
        run: |
          echo "GH_USER=ddkwork" >> $GITHUB_ENV
          echo "PATCH_FILE=mcp.patch" >> $GITHUB_ENV
          echo "UPSTREAM_URL=https://github.com/HyperDbg/HyperDbg.git" >> $GITHUB_ENV
          
          # 调试输出
          echo "DEBUG: 已设置环境变量"
          echo "GH_USER=${{ env.GH_USER }}"
          echo "PATCH_FILE=${{ env.PATCH_FILE }}"

      # 2. 克隆仓库 - 指定bash
      - name: Clone upstream
        run: |
          echo "克隆 HyperDbg 仓库..."
          git clone --recursive "https://github.com/HyperDbg/HyperDbg.git" -b user-debugger-breakpoint
          cd HyperDbg
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
        shell: bash

      # 3. 检出当前仓库
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          path: current-repo

      # 4. 应用补丁 - 指定bash ⭐核心修复
      - name: Apply patch and push
        run: |
          echo "::group::应用补丁过程"
          
          # 确保变量有值
          echo "GH_USER: $GH_USER"
          echo "PATCH_FILE: $PATCH_FILE"
          
          # 构建FORK_URL
          FORK_URL="https://github.com/$GH_USER/HyperDbg.git"
          echo "使用仓库: $FORK_URL"
          
          cd HyperDbg
          PATCH_PATH="../current-repo/$PATCH_FILE"
          
          # 检查文件是否存在 (bash语法)
          if [ ! -f "$PATCH_PATH" ]; then
            echo "::error::找不到补丁文件: $PATCH_PATH"
            echo "当前目录内容:"
            ls -l "../current-repo/"
            exit 1
          fi
          
          echo "复制补丁文件: $PATCH_PATH"
          cp "$PATCH_PATH" "temp.patch"
          
          echo "应用补丁..."
          git apply "temp.patch" || {
            echo "::warning::补丁应用可能有冲突"
            git diff
          }
          
          echo "清理临时文件..."
          rm "temp.patch"
          
          # 检查变化并提交
          git add .
          if git diff --cached --quiet; then
            echo "没有检测到变更，跳过提交"
          else
            commit_msg="自动补丁更新 $(date +'%Y-%m-%d %H:%M')"
            git commit -m "$commit_msg"
            git remote set-url origin "$FORK_URL"
            
            echo "推送到分支: user-debugger-breakpoint"
            git push --force "https://$GH_USER:$GH_TOKEN@github.com/$GH_USER/HyperDbg.git" user-debugger-breakpoint
          fi
          echo "::endgroup::"
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.tk }}
          GH_USER: ${{ env.GH_USER }}
          PATCH_FILE: ${{ env.PATCH_FILE }}
